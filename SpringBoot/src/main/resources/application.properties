server.port=8080

## DB Source URL
##ë¦¬ëì¤ ìë²2
##spring.datasource.url=jdbc:mysql://192.168.56.102:3306/amusement?allowPublicKeyRetrieval=true&serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#spring.datasource.url=jdbc:mysql://192.168.0.9:3306/amusement?allowPublicKeyRetrieval=true&serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#
## DB username
##spring.datasource.username=amuse
#spring.datasource.username=myuser
#
## DB password
##spring.datasource.password=!Boolean1234
#spring.datasource.password=tmvmfld1234!@#$

logging.level.org.springframework.security=trace
logging.file.name=excitingLog.log

# mysql Ã¬ÂÂ¤Ã¬Â Â
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/excitingamusement_boot?allowPublicKeyRetrieval=true&serverTimezone=UTC&useSSL=false&useUnicode=true&characterEncoding=UTF-8
#spring.datasource.url=jdbc:mysql://192.168.0.9:3306/excitingamusement_boot?serverTimezone=UTC&characterEncoding=UTF-8

# Ã«Â¡ÂÃªÂ·Â¸Ã¬ÂÂ¸
spring.datasource.username=root
spring.datasource.password=rpass

# hibernate Ã¬ÂÂ¤Ã¬Â Â 
spring.jpa.hibernate.ddl-auto=none

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
logging.level.org.hibernate.type.descriptor.sql=trace


spring.mvc.static-path-pattern: /static/** 
file.upload.directory=file:/C:/static/uploads/
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

#Oauth2.0 github ??

spring.security.oauth2.client.registration.github.clientId=Iv1.4abea673861f0e51
spring.security.oauth2.client.registration.github.clientSecret=559473762f895df05f107107aafd370f4ef81e5a
#github에서 성공적으로 로그인한 후 리디렉션될 애플리케이션(exciting)의 엔드포인트 주소 
#RegistrationId : github
spring.security.oauth2.client.registration.github.redirectUri={baseUrl}/login/auth/{registrationId}
spring.security.oauth2.client.registration.github.scope=user:email,read:user
#authorizationGrantType
spring.security.oauth2.client.registration.github.authorization-grant-type=authorization_code

#인가 작업을 할 주소(github)
spring.security.oauth2.client.provider.github.authorizationUri=https://github.com/login/oauth/authorize
#인가 완료 후 access_token을 받기 위해 접근할 주소(github)
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
#access_token으로 리소스오너의 리소스를 요청보내는 주소(github)
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user

#Oauth2.0 kakao

spring.security.oauth2.client.registration.kakao.client-id=3c41834efa9c843d49a5db035d348ae7

spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/auth/{registrationId}
#authorizationGrantType
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.kakao.authorizationUri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.tokenUri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.userNameAttribute=id

#Oauth2.0 naver

spring.security.oauth2.client.registration.naver.client-id=N2OVe4KktNgXZQ6PgzfU
spring.security.oauth2.client.registration.naver.clientSecret=SWFkSzoXa9

spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/login/auth/{registrationId}
#authorizationGrantType
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.naver.authorizationUri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.tokenUri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.userNameAttribute=resultcode


